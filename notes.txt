 Core Types

 * number - integers and floats
 * string - '', "", ``
 * boolean - true, false. No truthy or falsy
 * object - any js object, more specific types are possible 
 * arrays - any js array, type can be flexible or strict

 string[] = array with only strings. Running a for loop over a string[] gives you access to method you can use on a regular string
 any[] = mixed types array

 * tuple - a fixed-length array. limits how the array is manipulated. Can "push" onto the array, but everything else must match the specific types.

 * Enum - Automatically enumerated global constant identifiers


 *functions - the return is inferred. add a colon and type after the parameters



 Compiling

 *tsc {fileName.ts } --watch     will keep updating the file without having to tsc the file for every change

 *tsc --init    will watch all .ts files and compile changes

 *to exclude a file from compiling, add a key named "exclude" at the end of tsconfig.json and have an array of files you do not want compiled.

* to make sure to include files, add a key named 'include' at the end of tsconfig.json and have an array of files you want to make sure are included

*If errors with dom are occurring, change 'lib' in tsconfig.json and add identifiers
  make sure 'dom', 'es6', 'dom.iterable', 'scripthost' are in the array to have access to everything in e6.

*sourcemap will send .ts copies to the source tab in the browser inspector.

* outDir redirects the compiled files to another folder to keep .ts and .js in seperate areas

* rootDir specifies where the .ts files are to be compiled.

*noEmitOnError will not compile a file if it contains an error.


classes -
modifiers
*private - access in class only
*public - access anywhere
*static method - a call directly on a class, not an object creted based on it.
*abstract classes - cant be instantiated but has to be extended
*singleton class - only ever have one instance of a singleton class

interface 
* Defines what and object should look like. the structure.
* used to typecheck object structure

* implementing multiple interfaces to a class
  ex. class Person implements Greetable{}
* the class must use all properties from the interface, but can add own properties or methods
* readonly - the property cannot be changed if it has been initiated
* an interface can be extended like a class
* can define the structure of a functions
  ex. interface AddFn {
      (a:number, b:number): number
  }
  let add: AddFn
  add = (n1:number, n2:number) =>{
    return n1 + n2
  }
* to make a property optional, add a ? at the end of the property key.